---
alwaysApply: true
---

# LifeTracker - 开发规则

## 项目概述
**技术栈**: Tauri V2 + React 18 + TypeScript + Rust + SQLite  
**功能**: 时间追踪、财务管理、日记、习惯打卡、数据统计  
**工具**: Biome + pnpm + PowerShell

## 核心架构
- **前端**: React hooks + Tailwind CSS，无状态管理库
- **后端**: Rust + Tauri commands + SQLite
- **数据流**: invoke() 调用 -> Rust 处理 -> 数据库操作
- **实时更新**: 定时器轮询机制

## 代码规范

### 通用原则
- 注释中文，日志英文
- 优先级：可读性 > 简洁性 > 性能
- 错误处理：统一使用 Result<T,E>

### React/TypeScript
```typescript
// ✅ 函数组件 + hooks + useCallback
function TaskManagement() {
  const [tasks, setTasks] = useState<Task[]>([]);
  
  const fetchTasks = useCallback(async () => {
    try {
      const result = await invoke<Task[]>("get_tasks");
      setTasks(result);
    } catch (error) {
      console.error("获取任务失败:", error);
    }
  }, []);
  
  return <div>...</div>;
}

// ❌ 避免：类组件、any类型
```

### Rust 后端
```rust
// ✅ 错误处理 + 参数化查询
#[derive(Debug, thiserror::Error)]
pub enum AppError {
    #[error("数据库错误: {0}")]
    Database(#[from] rusqlite::Error),
}

#[tauri::command]
pub async fn get_tasks(state: State<'_, AppState>) -> Result<Vec<Task>, String> {
    // 参数化查询防止SQL注入
    conn.execute("INSERT INTO tasks (id, name) VALUES (?1, ?2)", params![id, name])?;
}
```

### 样式规范
```tsx
// ✅ Tailwind + 响应式 + 暗色主题
<div className="flex items-center justify-between p-4 bg-white dark:bg-gray-800 rounded-lg">
  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
```

## 开发流程
```bash
# 开发环境
pnpm tauri:dev

# 代码检查
pnpm biome check --apply

# 生产构建
pnpm tauri:build
```

## 性能优化
- **React**: useCallback、useMemo、组件拆分
- **Rust**: 数据库连接池、异步操作
- **UI**: 懒加载、响应式设计

## 安全要求
- 参数化查询防止SQL注入
- 用户输入验证
- Tauri CSP策略配置

## 功能模块
- **时间追踪**: 精确计时、暂停恢复、实时同步
- **财务管理**: 收支记录、预算监控、统计分析
- **日记功能**: 富文本编辑、心情追踪、搜索标签
- **习惯打卡**: 目标设定、连续统计、进度可视化
- **数据统计**: 多维分析、图表可视化、导出功能

## 开发提醒
- 保持代码可读性和可维护性
- 遵循现有架构模式
- 重大变更前讨论影响
- 综合生活追踪应用，不仅限于时间管理 
- 重大变更前先讨论架构影响
- 保持向后兼容性，避免破坏性更改
- LifeTracker 是一个综合性生活追踪应用，不仅限于时间管理 # LifeTracker - 开发规则

## 项目概述
**技术栈**: Tauri V2 + React 18 + TypeScript + Rust + SQLite  
**功能**: 时间追踪、财务管理、日记、习惯打卡、数据统计  
**工具**: Biome + pnpm + PowerShell

## 核心架构
- **前端**: React hooks + Tailwind CSS，无状态管理库
- **后端**: Rust + Tauri commands + SQLite
- **数据流**: invoke() 调用 -> Rust 处理 -> 数据库操作
- **实时更新**: 定时器轮询机制

## 代码规范

### 通用原则
- 注释中文，日志英文
- 优先级：可读性 > 简洁性 > 性能
- 错误处理：统一使用 Result<T,E>

### React/TypeScript
```typescript
// ✅ 函数组件 + hooks + useCallback
function TaskManagement() {
  const [tasks, setTasks] = useState<Task[]>([]);
  
  const fetchTasks = useCallback(async () => {
    try {
      const result = await invoke<Task[]>("get_tasks");
      setTasks(result);
    } catch (error) {
      console.error("获取任务失败:", error);
    }
  }, []);
  
  return <div>...</div>;
}

// ❌ 避免：类组件、any类型
```

### Rust 后端
```rust
// ✅ 错误处理 + 参数化查询
#[derive(Debug, thiserror::Error)]
pub enum AppError {
    #[error("数据库错误: {0}")]
    Database(#[from] rusqlite::Error),
}

#[tauri::command]
pub async fn get_tasks(state: State<'_, AppState>) -> Result<Vec<Task>, String> {
    // 参数化查询防止SQL注入
    conn.execute("INSERT INTO tasks (id, name) VALUES (?1, ?2)", params![id, name])?;
}
```

### 样式规范
```tsx
// ✅ Tailwind + 响应式 + 暗色主题
<div className="flex items-center justify-between p-4 bg-white dark:bg-gray-800 rounded-lg">
  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
```

## 开发流程
```bash
# 开发环境
pnpm tauri:dev

# 代码检查
pnpm biome check --apply

# 生产构建
pnpm tauri:build
```

## 性能优化
- **React**: useCallback、useMemo、组件拆分
- **Rust**: 数据库连接池、异步操作
- **UI**: 懒加载、响应式设计

## 安全要求
- 参数化查询防止SQL注入
- 用户输入验证
- Tauri CSP策略配置

## 功能模块
- **时间追踪**: 精确计时、暂停恢复、实时同步
- **财务管理**: 收支记录、预算监控、统计分析
- **日记功能**: 富文本编辑、心情追踪、搜索标签
- **习惯打卡**: 目标设定、连续统计、进度可视化
- **数据统计**: 多维分析、图表可视化、导出功能

## 开发提醒
- 保持代码可读性和可维护性
- 遵循现有架构模式
- 重大变更前讨论影响
- 综合生活追踪应用，不仅限于时间管理 
- 重大变更前先讨论架构影响
- 保持向后兼容性，避免破坏性更改
- LifeTracker 是一个综合性生活追踪应用，不仅限于时间管理 